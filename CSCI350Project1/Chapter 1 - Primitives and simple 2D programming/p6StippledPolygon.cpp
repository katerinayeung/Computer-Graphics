#include <GL\glut.h>

//------ global variables and constants------------
GLsizei ww = 512;
GLsizei wh = 512;
GLfloat left = -2;
GLfloat right = 2;
GLfloat bottom = -2;
GLfloat top = 2;
int p = 1, m = 1;

GLubyte mask0[] = {		// drawn in reverse order
	0xff, 0xff, 0xff, 0x00,
	0xff, 0xff, 0xff, 0x00,
	0xff, 0xff, 0xff, 0x00,
	0xff, 0xff, 0xff, 0x00,
	0xff, 0xff, 0xff, 0x00,
	0xff, 0xff, 0xff, 0x00,
	0xff, 0xff, 0xff, 0x00,
	0xff, 0xff, 0xff, 0x00,
	0xff, 0xff, 0xff, 0x00,
	0xff, 0xff, 0xff, 0x00,
	0xff, 0xff, 0xff, 0x00,
	0xff, 0xff, 0xff, 0x00,
	0xff, 0xff, 0xff, 0x00,
	0xff, 0xff, 0xff, 0x00,
	0xff, 0xff, 0xff, 0x00,
	0xff, 0xff, 0xff, 0x00,
	0x00, 0x00, 0xff, 0xff,
	0x00, 0x00, 0xff, 0xff,
	0x00, 0x00, 0xff, 0xff,
	0x00, 0x00, 0xff, 0xff,
	0x00, 0x00, 0xff, 0xff,
	0x00, 0x00, 0xff, 0xff,
	0x00, 0x00, 0xff, 0xff,
	0x00, 0x00, 0xff, 0xff,
	0x00, 0x00, 0xff, 0xff,
	0x00, 0x00, 0xff, 0xff,
	0x00, 0x00, 0xff, 0xff,
	0x00, 0x00, 0xff, 0xff,
	0x00, 0x00, 0xff, 0xff,
	0x00, 0x00, 0xff, 0xff,
	0x00, 0x00, 0xff, 0xff,
	0x00, 0x00, 0xff, 0xff };

GLubyte mask1[] = {		// drawn in reverse order
	0xff, 0xff, 0x00, 0x00,
	0xff, 0xff, 0x00, 0x00,
	0xff, 0xff, 0x00, 0x00,
	0xff, 0xff, 0x00, 0x00,
	0xff, 0xff, 0x00, 0x00,
	0xff, 0xff, 0x00, 0x00,
	0xff, 0xff, 0x00, 0x00,
	0xff, 0xff, 0x00, 0x00,
	0xff, 0xff, 0x00, 0x00,
	0xff, 0xff, 0x00, 0x00,
	0xff, 0xff, 0x00, 0x00,
	0xff, 0xff, 0x00, 0x00,
	0xff, 0xff, 0x00, 0x00,
	0xff, 0xff, 0x00, 0x00,
	0xff, 0xff, 0x00, 0x00,
	0xff, 0xff, 0x00, 0x00,
	0x00, 0x00, 0xff, 0xff,
	0x00, 0x00, 0xff, 0xff,
	0x00, 0x00, 0xff, 0xff,
	0x00, 0x00, 0xff, 0xff,
	0x00, 0x00, 0xff, 0xff,
	0x00, 0x00, 0xff, 0xff,
	0x00, 0x00, 0xff, 0xff,
	0x00, 0x00, 0xff, 0xff,
	0x00, 0x00, 0xff, 0xff,
	0x00, 0x00, 0xff, 0xff,
	0x00, 0x00, 0xff, 0xff,
	0x00, 0x00, 0xff, 0xff,
	0x00, 0x00, 0xff, 0xff,
	0x00, 0x00, 0xff, 0xff,
	0x00, 0x00, 0xff, 0xff,
	0x00, 0x00, 0xff, 0xff };

//pattern from "OpenGL Programming Guide"
GLubyte mask2[] = {
	0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00,
	0x03, 0x80, 0x01, 0xC0,
	0x06, 0xC0, 0x03, 0x60,
	0x04, 0x60, 0x06, 0x20,
	0x04, 0x30, 0x0C, 0x20,
	0x04, 0x18, 0x18, 0x20,
	0x04, 0x0C, 0x30, 0x20,
	0x04, 0x06, 0x60, 0x20,
	0x44, 0x03, 0xC0, 0x22,
	0x44, 0x01, 0x80, 0x22,
	0x44, 0x01, 0x80, 0x22,
	0x44, 0x01, 0x80, 0x22,
	0x44, 0x01, 0x80, 0x22,
	0x44, 0x01, 0x80, 0x22,
	0x44, 0x01, 0x80, 0x22,
	0x66, 0x01, 0x80, 0x66,
	0x33, 0x01, 0x80, 0xCC,
	0x19, 0x81, 0x81, 0x98,
	0x0C, 0xC1, 0x83, 0x30,
	0x07, 0xe1, 0x87, 0xe0,
	0x03, 0x3f, 0xfc, 0xc0,
	0x03, 0x31, 0x8c, 0xc0,
	0x03, 0x33, 0xcc, 0xc0,
	0x06, 0x64, 0x26, 0x60,
	0x0c, 0xcc, 0x33, 0x30,
	0x18, 0xcc, 0x33, 0x18,
	0x10, 0xc4, 0x23, 0x08,
	0x10, 0x63, 0xC6, 0x08,
	0x10, 0x30, 0x0c, 0x08,
	0x10, 0x18, 0x18, 0x08,
	0x10, 0x00, 0x00, 0x08 };

//pattern of a flower
GLubyte mask3[] = {
	0x00, 0x00, 0x10, 0x00,
	0x00, 0x00, 0x30, 0x00,
	0x00, 0x00, 0x70, 0x00,
	0x00, 0x00, 0x70, 0x00,
	0x00, 0x00, 0x60, 0x00,
	0x00, 0x00, 0x60, 0x00,
	0x00, 0x00, 0x60, 0x00,
	0x00, 0x00, 0x60, 0x00,
	0x00, 0x00, 0xC0, 0x00,
	0x00, 0x00, 0xCF, 0x80,
	0x00, 0x00, 0xFF, 0xF8,
	0x00, 0xFF, 0xCF, 0xFF,
	0x03, 0xFC, 0xC3, 0xF8,
	0x1F, 0xF0, 0x80, 0x00,
	0x00, 0x00, 0x80, 0x00,
	0x00, 0x38, 0x80, 0x00,
	0x00, 0xFE, 0xB8, 0x00,
	0x00, 0xFF, 0xFC, 0x00,
	0x00, 0x7F, 0xF8, 0x00,
	0x01, 0xFF, 0xF0, 0x00,
	0x03, 0xFF, 0xFE, 0x00,
	0x03, 0xFF, 0xFF, 0x00,
	0x01, 0xFF, 0xFF, 0x00,
	0x00, 0xEF, 0xFF, 0x00,
	0x00, 0x0F, 0xFE, 0x00,
	0x00, 0x1F, 0xC0, 0x00,
	0x00, 0x3F, 0xC0, 0x00,
	0x00, 0x3F, 0x80, 0x00,
	0x00, 0x1F, 0x00, 0x00,
	0x00, 0x1E, 0x00, 0x00,
	0x00, 0x0C, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00 };


//----- prototypes ----------
void display();
void polygon1();
void polygon2();
void init(void);
void reshape(GLsizei w, GLsizei h);


void display()
{
	GLubyte *mask = nullptr;	
	glClear(GL_COLOR_BUFFER_BIT);	// clear the background

	//glPolygonMode(GL_FRONT_AND_BACK, GL_LINE);	// no stipple in the line/point mode


	//------- draw the polygon without stipple -----------
	glColor3f(0, 1, 1);
	switch (p)
	{
	case 1:
		polygon1(); break;
	case 2:
		polygon2(); break;
	default:
		break;
	}

	//-------- draw the stippled polygon -----------
	glEnable(GL_POLYGON_STIPPLE);
	glColor3f(1, 0, 0);

	switch (m)
	{
	case 0:
		mask = mask0; break;
	case 1:
		mask = mask1; break;
	case 2:
		mask = mask2; break;
	case 3:
		mask = mask3; break;
	default:
		break;
	}

	glPolygonStipple(mask);
	
	switch (p)
	{
	case 1:
		polygon1(); break;
	case 2:
		polygon2(); break;
	default:
		break;     
	}
	
	glDisable(GL_POLYGON_STIPPLE);

	glFlush();	// force to render, work with single buffer
}

void polygon2()
{
	//glPolygonMode(GL_FRONT_AND_BACK, GL_LINE);
	glBegin(GL_POLYGON);
	//	glColor3ub(255, 0, 0);
		glVertex2f(-1.3, -1.1);

	//	glColor3ub(0, 255, 0);
		glVertex2f(1.2, -1.0);

	//	glColor3ub(0, 0, 255);
		glVertex2f(1.5, 0.9);

	//	glColor3ub(0, 255, 255);
		glVertex2f(0.3, 1.4);

	//	glColor3ub(255, 0, 255);
		glVertex2f(-1.7, 1.1);

	//	glColor3ub(0, 0, 0);
		glVertex2f(-1.9, 0.5);
	glEnd();
	glFlush();
}

void polygon1()
{
	glRectf(-1, -1, 1, 1);
}

void init(void)
{
	float ratio = ww*1.0 / (wh*1.0);

	glClearColor(1.0, 1.0, 1.0, 1.0);	// background color; default black; (R, G, B, Opacity)
	glColor3f(0, 1, 1);	// drawing color; default white

	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	if (ratio >= 1)
		gluOrtho2D(left*ratio, right*ratio, bottom, top);	// default (-1, 1, -1, 1)
	else
		gluOrtho2D(left, right, bottom / ratio, top / ratio);
	glMatrixMode(GL_MODELVIEW);
}

void reshape(GLsizei w, GLsizei h)
{
	float ratio = w*1.0 / (h*1.0);

	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	if (ratio >= 1)
		gluOrtho2D(left*ratio, right*ratio, bottom, top);
	else
		gluOrtho2D(left, right, bottom / ratio, top / ratio);
	glMatrixMode(GL_MODELVIEW);

	glViewport(0, 0, w, h);

	//------ reset the window size
	ww = w;
	wh = h;
}


void main()
{
	glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB); // GLUT_DOUBLE work with glutPostRedisplay
	glutInitWindowSize(ww, wh);	// default size 300 by 300
	glutInitWindowPosition(800, 200); // defualt at (0, 0)
	glutCreateWindow("Stippled Polygon");
	init();

	m = 2; //mask
	p = 1; //polygon

	glutDisplayFunc(display);
	glutReshapeFunc(reshape);

	glutMainLoop();
}